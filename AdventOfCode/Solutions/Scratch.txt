
    Ctrl + Alt + click : Add a secondary caret
    Ctrl + Alt + double-click : Add a secondary word selection
    Ctrl + Alt + click + drag : Add a secondary selection
    Shift + Alt + . : Add the next matching text as a selection
    Shift + Alt + ; : Add all matching text as selections
    Shift + Alt + , : Remove last selected occurrence
    Shift + Alt + / : Skip next matching occurrence
    Alt + click : Add a box selection
    Esc or click : Clear all selections

ctr k and ctr c or ctr u
ctr k and ctr s is surround with block
tab tab auto complete
cw tab tab to console write

List<List<long>> components = Better.InputTo2dLong(line, new List<string> { "," }, new List<string> { "-" }, 1);

var queryLondonCustomers3 =
    from cust in customers
    where cust.City == "London"
    orderby cust.Name ascending
    select cust;


var custQuery =
    from cust in customers
    group cust by cust.City into custGroup
    where custGroup.Count() > 2
    orderby custGroup.Key
    select custGroup;

    years = g.GroupBy(y=> y.Date.Year)
            .OrderBy(y=> y.Key)
            .Select(y=> y.Sum(y.funds))
            .ToList();

manual process input
hashmap
negates
sets
intersection
union
3128
AAIIJJJJIIAADDEEEEDDAABBBBCCDDEEEEDDCCBBBBCCDDEEEEDDCCBBBBCCDDEEFFGG

List<int> totals = new List<int>();
List<(List<(int, bool)>, bool)> boards = new List<(List<(int, bool)>, bool)>();
Lines = Input.SplitByNewline().ToLongArray();

Dictionary<long, long> grouping = new Dictionary<long, long>();
HashSet<double> Distances = new HashSet<double>();
dict123.Add(scanner, overlap);

Stack<string> st = new Stack<string>();

ContainsValue
if(map.ContainsKey(key))
{
      // Do something
}

input = input.Replace("\r\n", "\n");

int total = monValues.Sum(x => Convert.ToInt32(x));

integerList.Last()

for (int i = 0; i < Lines.Length; i++)
{

}

foreach (KeyValuePair<int,long> keyValue in VAR)
{
    
}

switch (VALUE) {
	case a:
		break;
	case b:
		break;
	case c:
		break;
	default:
		break;
}

counts[i] = Lines.Count(x => x == i);

counts.Sum(x => x.Value);

547
3395
3273


7461

6567