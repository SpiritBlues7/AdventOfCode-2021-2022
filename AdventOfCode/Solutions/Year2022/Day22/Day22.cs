using System;
using System.Collections.Generic;
using System.Text;

namespace AdventOfCode.Solutions.Year2022
{

    class Day22 : ASolution
    {
        public const int UP = 3;
        public const int RIGHT = 0;
        public const int DOWN = 1;
        public const int LEFT = 2;

        public Day22() : base(22, 2022, "")
        {

        }

        protected override string SolvePartOne(string input)
        {
            input = input.Replace("\r\n", "\n");
            string[] lines = input.SplitByNewline();

            int maxLengthRow = 0;
            for (int i = 0; i < lines.Length; i++)
            {
                maxLengthRow = Math.Max(maxLengthRow, lines[i].Length);
            }

            for (int i = 0; i < lines.Length; i++)
            {
                while(lines[i].Length < maxLengthRow)
                {
                    lines[i] += " ";
                }
            }

            List<string> directions = new List<string>();
            if (lines.Length > 15)
            {
                directions = new List<string>() { "17", "L", "25", "L", "32", "R", "15", "L", "31", "R", "29", "R", "9", "L", "13", "R", "49", "L", "39", "R", "47", "L", "22", "L", "28", "R", "49", "L", "16", "L", "14", "L", "48", "R", "11", "R", "15", "L", "22", "L", "25", "L", "16", "R", "27", "R", "28", "R", "39", "L", "44", "L", "47", "R", "49", "L", "38", "R", "15", "L", "34", "L", "18", "L", "21", "R", "41", "R", "39", "R", "46", "L", "7", "R", "42", "R", "16", "L", "27", "L", "3", "L", "32", "L", "28", "R", "3", "R", "3", "L", "49", "L", "27", "L", "37", "R", "49", "L", "46", "R", "20", "L", "12", "R", "45", "L", "17", "L", "35", "L", "2", "L", "8", "L", "23", "R", "14", "R", "35", "L", "44", "L", "29", "R", "22", "R", "50", "L", "31", "L", "44", "L", "36", "R", "12", "R", "37", "R", "34", "R", "24", "R", "33", "R", "33", "L", "43", "L", "20", "R", "27", "L", "12", "L", "24", "L", "50", "L", "14", "R", "46", "L", "41", "R", "34", "R", "35", "R", "16", "R", "33", "L", "41", "R", "34", "L", "38", "R", "22", "L", "4", "L", "46", "L", "12", "R", "42", "R", "23", "R", "20", "L", "43", "L", "34", "R", "22", "R", "46", "L", "12", "R", "44", "R", "42", "R", "17", "R", "47", "R", "25", "L", "4", "R", "18", "R", "13", "R", "13", "R", "18", "R", "20", "R", "24", "R", "20", "L", "14", "L", "21", "R", "6", "L", "13", "L", "21", "L", "5", "L", "22", "L", "26", "R", "50", "R", "18", "L", "48", "R", "20", "L", "35", "L", "29", "L", "24", "R", "48", "L", "15", "R", "36", "R", "41", "L", "3", "L", "40", "R", "12", "R", "10", "R", "13", "L", "21", "L", "25", "R", "43", "R", "25", "L", "2", "R", "46", "R", "21", "L", "26", "L", "4", "R", "9", "L", "19", "R", "37", "R", "23", "L", "24", "R", "25", "R", "34", "L", "24", "L", "44", "R", "39", "R", "39", "L", "17", "R", "50", "R", "5", "R", "26", "L", "12", "R", "42", "R", "8", "R", "13", "L", "42", "R", "6", "R", "4", "R", "32", "R", "12", "L", "43", "L", "45", "R", "29", "R", "31", "L", "16", "R", "20", "R", "36", "R", "47", "R", "22", "L", "41", "L", "5", "L", "14", "L", "44", "R", "1", "R", "17", "L", "33", "L", "2", "L", "32", "R", "33", "L", "16", "R", "3", "R", "20", "L", "24", "L", "9", "R", "20", "L", "22", "R", "45", "R", "39", "R", "26", "L", "1", "R", "21", "R", "14", "L", "40", "L", "6", "R", "1", "R", "32", "R", "17", "R", "47", "L", "34", "L", "12", "L", "47", "L", "15", "R", "38", "L", "1", "R", "1", "L", "24", "L", "2", "L", "23", "L", "38", "L", "28", "R", "49", "L", "18", "R", "43", "R", "19", "L", "1", "R", "35", "R", "12", "R", "50", "L", "1", "R", "12", "R", "27", "R", "1", "L", "18", "L", "24", "R", "2", "L", "8", "R", "37", "R", "37", "L", "49", "R", "41", "R", "1", "L", "38", "L", "32", "R", "12", "R", "46", "L", "11", "L", "6", "R", "33", "L", "12", "R", "1", "R", "16", "R", "43", "R", "14", "R", "50", "R", "13", "L", "35", "L", "14", "L", "3", "L", "49", "R", "43", "R", "30", "R", "17", "R", "45", "R", "30", "R", "8", "L", "27", "R", "37", "R", "40", "L", "29", "R", "38", "R", "25", "R", "29", "R", "21", "R", "37", "L", "45", "R", "27", "R", "3", "R", "30", "L", "12", "L", "32", "R", "22", "L", "10", "R", "30", "R", "24", "L", "17", "L", "5", "R", "3", "L", "22", "R", "21", "L", "13", "L", "15", "L", "40", "L", "17", "L", "36", "L", "16", "R", "4", "R", "34", "R", "27", "L", "43", "L", "29", "R", "49", "L", "24", "R", "43", "L", "14", "R", "34", "L", "6", "L", "42", "R", "32", "R", "40", "L", "13", "L", "31", "R", "17", "R", "24", "R", "31", "R", "27", "L", "33", "L", "2", "L", "24", "R", "28", "L", "49", "L", "8", "R", "29", "L", "25", "R", "25", "R", "27", "L", "37", "R", "49", "R", "3", "L", "21", "L", "4", "R", "38", "L", "20", "R", "2", "R", "12", "R", "21", "L", "32", "L", "25", "R", "10", "L", "5", "R", "43", "L", "47", "R", "46", "L", "21", "R", "48", "R", "8", "L", "33", "L", "43", "L", "38", "L", "26", "L", "39", "L", "16", "L", "8", "L", "14", "R", "13", "R", "11", "R", "3", "L", "15", "L", "46", "L", "25", "R", "5", "R", "8", "L", "24", "L", "2", "L", "33", "L", "37", "L", "2", "R", "33", "R", "13", "R", "2", "R", "17", "R", "34", "L", "46", "L", "35", "L", "29", "L", "32", "L", "46", "L", "4", "L", "45", "L", "4", "L", "27", "L", "23", "L", "34", "R", "8", "L", "37", "L", "31", "L", "20", "L", "29", "R", "29", "L", "46", "R", "34", "L", "41", "L", "37", "L", "1", "R", "10", "R", "34", "L", "25", "R", "20", "R", "40", "L", "26", "L", "11", "L", "5", "L", "8", "R", "4", "L", "45", "R", "20", "L", "17", "L", "16", "L", "48", "L", "32", "L", "35", "R", "36", "L", "20", "L", "39", "R", "13", "L", "18", "L", "2", "L", "9", "R", "6", "L", "20", "R", "14", "R", "30", "R", "15", "R", "36", "R", "38", "L", "32", "L", "36", "R", "17", "L", "16", "R", "25", "L", "47", "L", "30", "R", "40", "L", "13", "L", "36", "R", "40", "R", "7", "R", "8", "R", "24", "L", "3", "R", "25", "R", "26", "R", "6", "L", "38", "R", "7", "R", "24", "L", "34", "L", "13", "R", "43", "R", "30", "L", "6", "L", "38", "L", "28", "R", "21", "L", "11", "R", "12", "L", "32", "R", "29", "L", "25", "R", "50", "R", "25", "L", "29", "L", "5", "L", "44", "R", "31", "R", "26", "R", "10", "R", "49", "L", "36", "R", "49", "R", "44", "R", "28", "R", "13", "L", "7", "L", "2", "L", "19", "L", "38", "R", "37", "L", "4", "L", "2", "R", "36", "R", "33", "L", "11", "L", "40", "L", "27", "L", "22", "R", "17", "L", "27", "R", "14", "R", "5", "L", "8", "R", "40", "L", "23", "L", "28", "R", "10", "L", "33", "L", "46", "L", "1", "L", "31", "L", "14", "L", "49", "R", "5", "L", "26", "L", "38", "L", "5", "R", "29", "R", "25", "L", "47", "R", "34", "L", "15", "R", "37", "L", "28", "L", "8", "R", "17", "L", "22", "L", "37", "R", "35", "L", "8", "L", "45", "R", "3", "L", "1", "R", "5", "R", "3", "R", "7", "L", "47", "L", "9", "L", "37", "R", "27", "L", "2", "R", "4", "L", "48", "L", "2", "R", "15", "R", "25", "L", "17", "L", "42", "R", "6", "R", "33", "L", "19", "L", "12", "L", "3", "R", "5", "L", "25", "L", "40", "L", "27", "L", "42", "L", "2", "L", "9", "L", "45", "L", "10", "L", "20", "L", "33", "L", "42", "L", "18", "R", "1", "R", "3", "L", "24", "L", "39", "R", "14", "L", "48", "R", "13", "L", "21", "R", "23", "R", "37", "L", "16", "L", "34", "L", "19", "L", "42", "L", "4", "L", "8", "R", "10", "R", "47", "R", "26", "R", "6", "R", "19", "L", "15", "R", "43", "R", "5", "L", "5", "R", "32", "L", "28", "L", "14", "R", "38", "R", "21", "L", "45", "L", "46", "L", "19", "L", "41", "R", "10", "L", "13", "L", "15", "L", "36", "R", "46", "L", "39", "L", "8", "L", "33", "R", "4", "L", "40", "L", "7", "L", "12", "L", "47", "L", "31", "R", "17", "L", "17", "L", "47", "L", "27", "L", "25", "L", "43", "L", "2", "L", "16", "L", "6", "L", "19", "R", "5", "R", "16", "L", "45", "L", "12", "L", "11", "L", "46", "L", "5", "R", "34", "R", "40", "L", "18", "R", "7", "L", "47", "R", "28", "L", "31", "L", "38", "L", "39", "L", "40", "R", "47", "L", "5", "R", "47", "L", "38", "R", "47", "L", "16", "L", "14", "L", "34", "R", "50", "R", "15", "R", "35", "R", "11", "L", "49", "R", "48", "L", "18", "R", "32", "L", "46", "R", "16", "L", "4", "L", "32", "L", "20", "R", "23", "L", "10", "L", "46", "R", "6", "L", "19", "R", "8", "R", "31", "R", "9", "R", "31", "R", "45", "R", "25", "R", "32", "R", "29", "L", "24", "L", "39", "R", "35", "R", "26", "L", "25", "L", "48", "L", "19", "R", "43", "L", "26", "R", "27", "L", "45", "R", "5", "L", "31", "R", "48", "R", "1", "L", "11", "L", "9", "L", "9", "R", "34", "L", "32", "L", "17", "L", "24", "R", "34", "L", "14", "L", "35", "L", "7", "L", "37", "L", "7", "R", "7", "R", "15", "R", "36", "R", "46", "R", "24", "L", "43", "R", "14", "L", "49", "R", "47", "R", "22", "R", "27", "L", "29", "L", "9", "R", "50", "R", "34", "R", "1", "L", "38", "R", "37", "L", "42", "R", "31", "R", "33", "R", "19", "R", "35", "R", "40", "L", "14", "R", "30", "L", "7", "L", "32", "R", "19", "L", "45", "R", "6", "R", "14", "L", "27", "L", "27", "L", "18", "L", "35", "R", "15", "R", "48", "L", "31", "L", "29", "L", "33", "R", "8", "R", "24", "R", "7", "R", "19", "L", "32", "R", "17", "R", "42", "R", "38", "L", "49", "R", "4", "L", "44", "R", "18", "R", "7", "R", "40", "L", "19", "R", "6", "L", "29", "L", "50", "L", "38", "R", "14", "R", "28", "L", "27", "L", "20", "R", "3", "L", "25", "L", "18", "L", "23", "L", "49", "R", "6", "L", "46", "L", "19", "L", "33", "L", "36", "L", "35", "R", "29", "R", "34", "R", "50", "L", "13", "R", "20", "R", "1", "L", "33", "R", "15", "L", "17", "L", "45", "R", "32", "L", "32", "R", "24", "R", "6", "R", "6", "L", "24", "R", "39", "R", "48", "L", "21", "L", "26", "L", "15", "L", "29", "L", "9", "L", "36", "L", "20", "L", "28", "L", "26", "L", "43", "R", "11", "R", "10", "L", "29", "L", "44", "L", "37", "L", "37", "R", "37", "L", "12", "R", "16", "L", "31", "R", "41", "L", "32", "L", "21", "L", "49", "L", "32", "L", "22", "L", "34", "L", "46", "R", "44", "R", "17", "L", "11", "R", "44", "R", "2", "R", "14", "L", "27", "R", "26", "R", "19", "R", "24", "L", "31", "L", "17", "R", "40", "R", "41", "L", "35", "R", "11", "R", "38", "R", "32", "R", "49", "R", "44", "L", "30", "L", "49", "L", "25", "L", "46", "L", "31", "R", "39", "R", "36", "R", "1", "L", "44", "R", "20", "L", "4", "L", "9", "R", "11", "L", "44", "L", "33", "R", "43", "R", "17", "R", "8", "L", "1", "R", "17", "L", "3", "L", "35", "R", "20", "L", "35", "L", "39", "R", "27", "L", "10", "R", "6", "L", "38", "R", "37", "R", "48", "R", "39", "R", "28", "R", "34", "L", "38", "L", "12", "L", "45", "R", "50", "L", "27", "L", "43", "L", "43", "R", "24", "R", "24", "R", "26", "R", "13", "L", "8", "L", "47", "L", "10", "R", "50", "L", "24", "R", "38", "L", "28", "R", "41", "R", "41", "R", "38", "R", "3", "L", "9", "R", "45", "L", "15", "R", "36", "R", "31", "R", "20", "R", "45", "L", "27", "R", "14", "L", "1", "L", "43", "L", "1", "L", "41", "L", "40", "L", "31", "R", "47", "R", "45", "L", "15", "L", "44", "R", "25", "L", "4", "L", "25", "L", "13", "L", "32", "R", "40", "L", "25", "R", "1", "R", "43", "L", "45", "R", "10", "L", "18", "L", "47", "R", "43", "L", "5", "L", "21", "L", "23", "R", "18", "L", "49", "L", "47", "R", "44", "L", "37", "R", "9", "R", "30", "R", "4", "L", "44", "R", "18", "R", "4", "L", "29", "L", "10", "R", "21", "R", "15", "L", "4", "L", "16", "L", "10", "R", "42", "L", "38", "R", "32", "R", "35", "R", "26", "R", "26", "L", "3", "L", "48", "L", "28", "R", "29", "R", "5", "R", "43", "L", "32", "L", "44", "R", "32", "R", "39", "L", "41", "L", "37", "L", "9", "R", "17", "L", "16", "L", "5", "R", "50", "L", "34", "R", "31", "L", "28", "R", "26", "L", "34", "L", "36", "R", "5", "L", "43", "R", "31", "R", "35", "L", "37", "R", "22", "L", "17", "L", "7", "R", "5", "R", "4", "L", "47", "L", "42", "L", "27", "L", "12", "L", "7", "R", "45", "R", "20", "L", "29", "R", "8", "R", "39", "R", "46", "R", "15", "R", "14", "R", "28", "L", "24", "R", "8", "R", "31", "R", "3", "L", "47", "L", "38", "R", "4", "L", "18", "L", "13", "R", "45", "L", "13", "R", "28", "R", "4", "R", "24", "L", "13", "L", "28", "L", "16", "L", "12", "L", "6", "R", "12", "L", "31", "L", "26", "R", "44", "R", "17", "R", "13", "R", "1", "L", "1", "R", "36", "L", "10", "L", "31", "L", "17", "R", "1", "L", "16", "L", "47", "L", "19", "R", "48", "R", "6", "L", "3", "L", "29", "R", "9", "L", "7", "L", "10", "R", "22", "R", "16", "L", "42", "R", "49", "L", "40", "L", "25", "L", "14", "R", "8", "R", "6", "L", "18", "R", "6", "L", "13", "L", "9", "R", "44", "R", "37", "R", "38", "L", "11", "L", "29", "R", "26", "R", "11", "L", "25", "L", "35", "L", "39", "R", "27", "L", "9", "R", "36", "L", "7", "L", "46", "R", "21", "L", "28", "R", "30", "R", "28", "L", "47", "R", "22", "R", "50", "R", "42", "L", "8", "L", "47", "R", "40", "R", "47", "R", "49", "R", "20", "R", "14", "L", "4", "R", "27", "R", "10", "L", "32", "R", "18", "L", "33", "L", "1", "R", "27", "L", "30", "L", "39", "L", "20", "R", "27", "R", "50", "L", "8", "L", "32", "R", "17", "L", "40", "R", "27", "L", "23", "L", "16", "L", "36", "R", "48", "L", "38", "R", "3", "L", "36", "L", "45", "R", "31", "L", "7", "R", "21", "L", "14", "L", "23", "R", "47", "L", "34", "L", "25", "L", "38", "L", "1", "L", "45", "R", "12", "R", "17", "L", "17", "L", "46", "R", "49", "L", "19", "L", "33", "L", "30", "R", "33", "R", "26", "L", "3", "L", "40", "L", "15", "R", "24", "R", "37", "L", "10", "L", "24", "R", "27", "L", "50", "L", "17", "R", "35", "L", "2", "R", "45", "L", "40", "R", "20", "R", "10", "R", "25", "L", "27", "R", "23", "L", "14", "L", "9", "R", "10", "R", "16", "R", "32", "L", "27", "R", "18", "R", "22", "L", "14", "L", "29", "L", "32", "L", "25", "R", "18", "R", "41", "R", "31", "L", "21", "L", "27", "R", "5", "R", "33", "L", "31", "L", "40", "R", "15", "L", "3", "R", "22", "L", "16", "L", "11", "L", "20", "R", "3", "L", "32", "L", "8", "R", "8", "L", "40", "L", "11", "L", "45", "R", "9", "L", "13", "R", "8", "L", "19", "R", "42", "R", "17", "L", "18", "L", "22", "R", "16", "L", "39", "R", "13", "R", "29", "R", "44", "R", "12", "R", "25", "R", "38", "L", "23", "L", "24", "L", "38", "L", "21", "L", "29", "L", "20", "L", "32", "L", "4", "L", "43", "L", "11", "L", "15", "R", "14", "R", "17", "L", "9", "L", "42", "R", "42", "R", "26", "R", "20", "R", "3", "R", "22", "R", "46", "L", "50", "R", "42", "L", "28", "R", "49", "R", "37", "L", "35", "R", "16", "L", "24", "R", "7", "R", "9", "R", "47", "L", "16", "R", "7", "L", "32", "L", "22", "R", "5", "L", "42", "R", "40", "R", "6", "L", "18", "L", "50", "L", "25", "R", "8", "L", "43", "L", "6", "R", "10", "L", "19", "R", "25", "L", "3", "R", "9", "L", "11", "R", "48", "R", "25", "L", "37", "L", "16", "L", "29", "L", "2", "L", "49", "R", "42", "R", "23", "R", "13", "L", "36", "R", "20", "R", "21", "L", "38", "L", "37", "L", "42", "R", "26", "L", "35", "L", "47", "R", "23", "L", "13", "L", "5", "L", "48", "R", "46", "L", "11", "R", "43", "R", "26", "R", "27", "L", "12", "L", "49", "R", "16", "R", "13", "L", "29", "R", "36", "L", "34", "R", "7", "L", "16", "L", "1", "R", "49", "L", "46", "L", "46", "L", "25", "L", "46", "R", "34", "R", "30", "L", "15", "L", "35", "R", "37", "L", "3", "L", "37", "L", "36", "L", "43", "R", "46", "L", "14", "L", "35", "R", "38", "L", "46", "L", "24", "L", "45", "L", "8", "R", "1", "L", "46", "R", "30", "R", "17", "R", "15", "L", "17", "R", "7", "R", "37", "L", "35", "L", "28", "R", "5", "R", "27", "R", "13", "L", "32", "R", "5", "L", "18", "L", "48", "L", "3", "R", "1", "R", "11", "R", "2", "R", "36", "R", "28", "R", "9", "L", "37", "R", "10", "L", "2", "R", "17", "R", "32", "R", "7", "R", "8", "L", "24", "R", "44", "R", "26", "R", "4", "R", "1", "R", "24", "L", "16", "L", "43", "R", "38", "L", "33", "L", "45", "R", "23", "L", "23", "R", "33", "L", "45", "L", "4", "R", "37", "R", "28", "R", "39", "L", "43", "R", "50", "L", "45", "R", "49", "L", "10", "R", "2", "R", "26", "L", "24", "R", "50", "L", "27", "R", "50", "L", "40", "R", "46", "R", "40", "R", "32", "L", "20", "R", "38", "R", "19", "L", "24", "R", "28", "L", "28", "R", "26", "L", "50", "L", "43", "R", "20", "R", "8", "R", "43", "R", "31", "L", "21", "L", "31", "L", "22", "L", "43", "R", "1", "R", "15", "R", "28", "R", "8", "L", "29", "L", "34", "R", "4", "L", "1", "L", "48", "L", "18", "L", "17", "R", "45", "R", "1", "R", "23", "R", "46", "R", "31", "R", "31", "L", "3", "R", "5", "L", "36", "L", "45", "L", "1", "R", "10", "L", "14", "L", "10", "L", "36", "R", "5", "L", "10", "L", "45", "L", "22", "L", "47", "L", "42", "L", "15", "L", "48", "L", "42", "R", "14", "R", "41", "L", "10", "R", "49", "L", "25", "L", "18", "R", "8", "R", "43", "R", "29", "R", "9", "R", "6", "R", "31", "R", "8", "L", "6", "R", "22", "L", "13", "L", "24", "R", "28", "R", "15", "R", "13", "L", "32", "L", "2", "R", "17", "R", "16", "L", "17", "L", "16", "R", "33", "L", "7", "L", "8", "R", "50", "L", "41", "L", "22", "L", "47", "L", "30", "L", "47", "L", "37", "R", "11", "R", "44", "R", "1", "R", "46", "R", "48", "L", "38", "L", "7", "L", "24", "L", "44", "R", "43", "L", "14", "L", "43", "L", "40", "R", "41", "R", "44", "L", "48", "L", "4", "L", "11", "L", "36", "L", "39", "L", "23", "L", "24", "L", "15", "L", "34", "L", "7", "R", "35", "R", "22", "R", "42", "R", "49", "L", "35", "R", "7", "R", "1", "L", "8", "R", "42", "L", "27", "R", "39", "L", "37", "R", "1", "L", "21", "R", "2", "R", "33", "L", "18", "L", "17", "R", "2", "L", "37", "L", "8", "L", "35", "L", "16", "R", "25", "R", "32", "R", "4", "L", "33", "L", "24", "R", "20", "R", "41", "R", "39", "L", "12", "L", "12", "L", "42", "R", "33", "L", "4", "R", "38", "L", "42", "L", "16", "L", "14", "L", "32", "R", "36", "L", "15", "L", "1", "L", "20", "R", "14", "R", "37", "R", "33", "L", "21", "L", "24", "R", "28", "L", "11", "L", "12", "L", "49", "L", "13", "R", "4", "R", "26", "R", "2", "L", "4", "L", "35", "L", "42", "R", "11", "R", "23", "R", "27", "L", "6", "R", "38", "R", "9", "R", "47", "L", "23", "L", "4", "R", "37", "R", "5", "L", "37", "L", "11", "R", "11", "L", "19", "L", "10", "L", "38", "L", "17", "R", "3", "L", "18", "R", "44", "L", "22", "R", "10", "R", "50", "L", "33", "L", "29", "L", "42", "R", "15", "L", "3", "L", "20", "L", "5", "R", "6", "R", "23", "R", "6", "R", "25", "L", "46", "L", "48", "L", "9", "L", "22", "R", "37", "L", "16", "R", "7", "L", "22", "L", "37", "R", "36", "R", "17", "R", "13", "L", "21", "L", "4", "L", "27", "L", "41", "R", "35", "L", "29", "R", "47", "R", "7", "R", "13", "R", "43", "R", "9", "L", "33", "L", "50", "R", "50", "R", "30", "L", "37", "R", "48", "R", "46", "R", "13", "R", "45", "L", "8", "L", "47", "R", "49", "R", "11", "R", "19", "L", "3", "R", "15", "R", "27", "R", "31", "R", "33", "L", "14", "R", "25", "R", "46", "R", "14", "R", "45", "R", "44", "L", "10", "L", "11", "L", "36", "R", "30", "L", "13", "L", "36", "L", "26", "L", "24", "R", "29", "R", "46", "L", "4", "R", "22", "R", "47", "R", "19", "L", "24", "L", "8", "R", "13", "R", "35", "L", "33", "L", "24", "R", "41", "R", "39", "L", "36", "L", "17", "L", "25", "L", "10", "L", "12", "R", "13", "L", "39", "R", "20", "R", "46", "L", "25", "L", "41", "R", "49", "L", "13", "L", "5", "R", "34", "L", "19", "R", "13", "R", "32", "L", "33", "L", "6", "L", "35", "R", "44", "R", "40", "R", "4", "R", "41", "L", "39", "L", "45", "R", "49", "R", "36", "L", "47", "R", "14", "R", "6", "L", "14", "R", "1", "L", "15", "L", "21", "R", "11", "R", "47", "R", "45", "R", "23", "R", "25", "R", "43", "L", "14", "L", "1", "R", "25", "R", "19", "L", "38", "L", "16", "R", "14", "L", "32", "R", "29", "L", "25", "L", "43", "L", "33", "L", "17", "L", "1", "R", "11", "L", "5", "R", "25", "L", "32", "R", "40", "L", "6", "R", "47", "R", "14", "L", "20", "L", "43", "R", "49", "R", "36", "R", "12", "R", "36", "R", "47", "L", "6", "R", "28", "R", "49", "R", "32", "R", "38", "R", "41", "R", "35", "L", "43", "L", "42", "R", "43", "R", "50", "R", "24", "R", "9", "L", "7", "R", "41", "L", "16", "R", "34", "R", "13", "R", "16", "L", "50", "R", "11", "L", "39", "L", "48", "L", "32", "R", "34", "L", "16", "L", "11", "R", "43", "R", "27", "R", "3", "R", "50", "R", "18", "L", "16", "L", "46", "L", "37", "L", "14", "L", "42", "R", "6", "R", "27", "L", "49", "L", "48", "L", "7", "L", "27", "L", "47", "R", "10", "L", "47", "R", "30", "R", "39", "L", "38", "L", "14", "R", "32", "L", "47", "L", "44", "L", "2", "L", "22", "L", "32", "L", "44", "L", "37", "L", "46", "R", "6", "R", "18", "R", "49", "L", "14", "R", "45", "R", "17", "L", "21", "R", "18", "R", "47", "L", "49", "R", "19", "R", "23", "L", "43", "R", "18", "R", "40", "L", "35", "L", "27", "L", "34", "R", "26", "R", "17", "L", "26", "R", "16", "L", "26", "R", "46", "L", "33", "R", "26", "L", "49", "L", "38", "R", "33", "R", "38", "R", "29", "R", "38", "R", "37", "R", "40", "L", "1", "L", "13", "L", "5", "R", "45", "L", "20", "L", "48", "R", "12", "L", "17", "L", "11", "R", "16", "R", "2", "R", "35", "R", "3", "R", "14", "L", "47", "L", "8", "R", "10", "R", "34", "L", "42", "R", "8", "R", "38", "R", "14", "L", "48", "L", "8", "L", "47", "R", "24", "L", "10", "L", "44", "L", "7", "R", "14", "L", "31", "R", "6", "R", "8", "L", "11", "L", "12", "R", "37", "R", "11", "R", "22", "L", "14", "L", "50", "L", "43", "R", "28", "L", "21", "R", "7", "R", "42", "L", "20", "L", "1", "L", "4", "L", "42", "L", "4", "R", "26", "R", "20", "R", "48", "R", "6", "R", "37", "R", "29", "L", "5", "L", "8", "R", "8", "R", "12", "R", "18", "L", "45", "L", "39", "R", "46", "R", "6", "R", "24", "R", "23", "R", "16", "R", "12", "R", "28", "L", "27", "R", "33", "R", "15", "R", "49", "R", "41", "L", "9", "L", "12", "L", "31", "R", "21", "L", "33", "R", "31", "R", "26", "R", "6", "R", "16", "R", "21", "L", "24", "L", "5", "R", "11", "L", "44", "L", "3", "L", "30", "L", "6", "L", "21", "R", "9", "L", "6", "L", "5", "R", "1", "L", "17", "L", "5", "R", "40", "L", "48", "L", "20", "R", "5", "R", "37", "R", "37", "L", "29", "R", "2", "R", "35", "L", "12", "R", "19", "R", "11", "L", "49", "L", "49", "L", "21", "R", "24", "R", "25", "L", "45", "R", "17", "L", "33", "L", "13", "R", "20", "L", "9", "R", "39", "L", "12", "L", "27", "L", "21", "R", "7", "L", "49", "R", "35", "L", "8", "L", "21", "L", "11", "R", "16", "R", "43", "L", "48", "L", "28", "L", "13", "L", "35", "L", "46", "L", "8", "R", "32", "R", "35", "R", "46", "R", "14", "L", "46", "L", "44", "L", "21", "R", "6", "R", "11", "L", "26", "R", "1", "L", "3", "R", "20", "L", "27", "R", "28", "L", "12", "R", "9", "R", "17", "R", "7", "L", "43", "L", "43", "L", "34", "R", "16", "L", "4", "L", "23", "L", "33", "L", "40", "L", "46", "L", "35", "R", "20", "L", "47", "R", "12", "L", "13", "L", "6", "R", "32", "L", "26", "L", "18", "L", "6", "L", "39", "L", "31", "L", "2", "L", "31", "L", "29", "R", "40", "R", "9" };
            }
            else
            {
                directions = new List<string>() { "10", "R", "5", "L", "5", "R", "10", "L", "4", "R", "5", "L", "5" };
            }

            (int, int) start = (0, 0);
            for (int i = 0; i < lines[0].Length; i++)
            {
                if (lines[0][i] == '.')
                {
                    start = (0, i);
                    break;
                }
            }
            (int r, int c) cur = start;
            int facing = 0;
            foreach (string dir in directions)
            {
                //for (int i = 0; i < lines.Length; i++)
                //{
                //    for (int j = 0; j < maxLengthRow; j++)
                //    {
                //        if (i == cur.r && j == cur.c)
                //        {
                //            Console.Write("@");
                //        }
                //        else
                //        {
                //            Console.Write(lines[i][j]);

                //        }
                //    }
                //    Console.WriteLine();
                //}

                if (dir.Equals("L"))
                {
                    facing = (facing - 1 + 4) % 4;
                }
                else if (dir.Equals("R"))
                {
                    facing = (facing + 1) % 4;
                }
                else
                {
                    int amount = int.Parse(dir);
                    bool hitWall = false;

                    for (int i = 0; i < amount; i++)
                    {

                        switch (facing)
                        {
                            case UP:
                                if (lines[(cur.r - 1 + lines.Length) % lines.Length][(cur.c + 0) % maxLengthRow] == '#')
                                {
                                    hitWall = true;
                                    break;
                                }
                                if ((cur.r - 1) == -1 || 
                                    lines[cur.r - 1 ][cur.c + 0] == ' ')
                                {
                                    int offset = 1;
                                    while ((cur.r - offset) != -1 && lines[cur.r - offset][cur.c] == ' ')
                                    {
                                        if (lines[cur.r - offset][cur.c] == '#')
                                        {
                                            hitWall = true;
                                            break;
                                        }
                                        if (lines[cur.r - offset][cur.c] == '.')
                                        {
                                            cur = (cur.r - offset, cur.c);
                                            break;
                                        }
                                        offset++;
                                    }
                                    if ((cur.r - offset) == -1)
                                    {
                                        for (int j = lines.Length - 1; j >= 0; j--)
                                        {
                                            if (lines[j][cur.c] == '#')
                                            {
                                                hitWall = true;
                                                break;
                                            }
                                            if (lines[j][cur.c] == '.')
                                            {
                                                cur = (j, cur.c);
                                                break;
                                            }
                                        }
                                    }

                                    if (hitWall)
                                    {
                                        break;
                                    }
                                } else
                                {
                                    cur = ((cur.r - 1 + lines.Length) % lines.Length, cur.c + 0);
                                }
                                break;



                            case RIGHT:
                                if (lines[(cur.r + 0) % lines.Length][(cur.c + 1) % maxLengthRow] == '#')
                                {
                                    hitWall = true;
                                    break;
                                }
                                if ((cur.c + 1) == maxLengthRow || 
                                    lines[cur.r + 0][cur.c + 1] == ' ')
                                {
                                    int offset = 1;
                                    while ((cur.c + offset) != maxLengthRow && lines[cur.r + 0][cur.c + offset] == ' ')
                                    {
                                        if (lines[cur.r][cur.c + offset] == '#')
                                        {
                                            hitWall = true;
                                            break;
                                        }
                                        if (lines[cur.r][cur.c + offset] == '.')
                                        {
                                            cur = (cur.r, cur.c + offset);
                                            break;
                                        }
                                        offset++;
                                    }

                                    if ((cur.c + offset) == maxLengthRow)
                                    {
                                        for  (int j = 0; j < maxLengthRow; j++)
                                        {
                                            if (lines[cur.r][j] == '#')
                                            {
                                                hitWall = true;
                                                break;
                                            }
                                            if (lines[cur.r][j] == '.')
                                            {
                                                cur = (cur.r, j);
                                                break;
                                            }
                                        }
                                    }
                                    if (hitWall)
                                    {
                                        break;
                                    }
                                }
                                else
                                {
                                    cur = ((cur.r + 0) % lines.Length, (cur.c + 1) % maxLengthRow);
                                }
                                break;


                            case DOWN:
                                if (lines[(cur.r + 1) % lines.Length][(cur.c + 0) % maxLengthRow] == '#')
                                {
                                    hitWall = true;
                                    break;
                                }
                                if ((cur.r + 1) == lines.Length || 
                                    lines[cur.r + 1][cur.c + 0] == ' ')
                                {
                                    int offset = 1;
                                    while ((cur.r + offset) != lines.Length && lines[cur.r + offset][cur.c] == ' ')
                                    {
                                        if (lines[cur.r + offset][cur.c] == '#')
                                        {
                                            hitWall = true;
                                            break;
                                        }
                                        if (lines[cur.r + offset][cur.c] == '.')
                                        {
                                            cur = (cur.r + offset, cur.c);
                                            break;
                                        }
                                        offset++;
                                    }
                                    if ((cur.r + offset) == lines.Length)
                                    {
                                        for (int j = 0; j < lines.Length; j++)
                                        {
                                            if (lines[j][cur.c] == '#')
                                            {
                                                hitWall = true;
                                                break;
                                            }
                                            if (lines[j][cur.c] == '.')
                                            {
                                                cur = (j, cur.c);
                                                break;
                                            }
                                        }
                                    }
                                    if (hitWall)
                                    {
                                        break;
                                    }
                                }
                                else
                                {
                                    cur = ((cur.r + 1) % lines.Length, cur.c + 0);
                                }
                                break;



                            case LEFT:
                                if (lines[(cur.r + 0) % lines.Length][(cur.c - 1 + maxLengthRow) % maxLengthRow] == '#')
                                {
                                    hitWall = true;
                                    break;
                                }
                                if ((cur.c - 1) == -1 ||
                                    lines[cur.r + 0][cur.c - 1] == ' ')
                                {
                                    int offset = 1;
                                    while ((cur.c - offset) != -1 && lines[cur.r + 0][cur.c - offset] == ' ')
                                    {
                                        if (lines[cur.r][cur.c - offset] == '#')
                                        {
                                            hitWall = true;
                                            break;
                                        }
                                        if (lines[cur.r][cur.c - offset] == '.')
                                        {
                                            cur = (cur.r, cur.c - offset);
                                            break;
                                        }
                                        offset++;
                                    }

                                    if ((cur.c - offset) == -1)
                                    {
                                        for (int j = maxLengthRow - 1; j >= 0; j--)
                                        {
                                            if (lines[cur.r][j] == '#')
                                            {
                                                hitWall = true;
                                                break;
                                            }
                                            if (lines[cur.r][j] == '.')
                                            {
                                                cur = (cur.r, j);
                                                break;
                                            }
                                        }
                                    }
                                    if (hitWall)
                                    {
                                        break;
                                    }
                                }
                                else
                                {
                                    cur = (cur.r + 0, (cur.c - 1 + maxLengthRow) % maxLengthRow);
                                }
                                
                                break;
                            default:
                                break;
                        }
                        if (hitWall)
                        {
                            break;
                        }
                    }

                }
            }

            long ans = (cur.r + 1) * 1000 + (cur.c + 1) * 4 + facing;


            return ans.ToString();
        }

        protected override string SolvePartTwo(string input)
        {
            input = input.Replace("\r\n", "\n");
            string[] lines = input.SplitByNewline();

            int maxLengthRow = 0;
            for (int i = 0; i < lines.Length; i++)
            {
                maxLengthRow = Math.Max(maxLengthRow, lines[i].Length);
            }

            for (int i = 0; i < lines.Length; i++)
            {
                while (lines[i].Length < maxLengthRow)
                {
                    lines[i] += " ";
                }
            }

            Dictionary<(int cube, int r, int c, int dir), (int cube, int r, int c, int dir)> cubeMapping = new Dictionary<(int, int, int, int), (int, int, int, int)>();
            Dictionary<(int cube, int r, int c), (int r, int c)> mappingToOriginal = new Dictionary<(int, int, int), (int, int)>();
            Dictionary<(int r, int c), (int cube, int r, int c)> originalMappingToCube = new Dictionary<(int, int), (int, int, int)>();

            List<string> directions = new List<string>();
            int cubeWidth = 0;
            if (lines.Length > 15)
            {
                directions = new List<string>() { "17", "L", "25", "L", "32", "R", "15", "L", "31", "R", "29", "R", "9", "L", "13", "R", "49", "L", "39", "R", "47", "L", "22", "L", "28", "R", "49", "L", "16", "L", "14", "L", "48", "R", "11", "R", "15", "L", "22", "L", "25", "L", "16", "R", "27", "R", "28", "R", "39", "L", "44", "L", "47", "R", "49", "L", "38", "R", "15", "L", "34", "L", "18", "L", "21", "R", "41", "R", "39", "R", "46", "L", "7", "R", "42", "R", "16", "L", "27", "L", "3", "L", "32", "L", "28", "R", "3", "R", "3", "L", "49", "L", "27", "L", "37", "R", "49", "L", "46", "R", "20", "L", "12", "R", "45", "L", "17", "L", "35", "L", "2", "L", "8", "L", "23", "R", "14", "R", "35", "L", "44", "L", "29", "R", "22", "R", "50", "L", "31", "L", "44", "L", "36", "R", "12", "R", "37", "R", "34", "R", "24", "R", "33", "R", "33", "L", "43", "L", "20", "R", "27", "L", "12", "L", "24", "L", "50", "L", "14", "R", "46", "L", "41", "R", "34", "R", "35", "R", "16", "R", "33", "L", "41", "R", "34", "L", "38", "R", "22", "L", "4", "L", "46", "L", "12", "R", "42", "R", "23", "R", "20", "L", "43", "L", "34", "R", "22", "R", "46", "L", "12", "R", "44", "R", "42", "R", "17", "R", "47", "R", "25", "L", "4", "R", "18", "R", "13", "R", "13", "R", "18", "R", "20", "R", "24", "R", "20", "L", "14", "L", "21", "R", "6", "L", "13", "L", "21", "L", "5", "L", "22", "L", "26", "R", "50", "R", "18", "L", "48", "R", "20", "L", "35", "L", "29", "L", "24", "R", "48", "L", "15", "R", "36", "R", "41", "L", "3", "L", "40", "R", "12", "R", "10", "R", "13", "L", "21", "L", "25", "R", "43", "R", "25", "L", "2", "R", "46", "R", "21", "L", "26", "L", "4", "R", "9", "L", "19", "R", "37", "R", "23", "L", "24", "R", "25", "R", "34", "L", "24", "L", "44", "R", "39", "R", "39", "L", "17", "R", "50", "R", "5", "R", "26", "L", "12", "R", "42", "R", "8", "R", "13", "L", "42", "R", "6", "R", "4", "R", "32", "R", "12", "L", "43", "L", "45", "R", "29", "R", "31", "L", "16", "R", "20", "R", "36", "R", "47", "R", "22", "L", "41", "L", "5", "L", "14", "L", "44", "R", "1", "R", "17", "L", "33", "L", "2", "L", "32", "R", "33", "L", "16", "R", "3", "R", "20", "L", "24", "L", "9", "R", "20", "L", "22", "R", "45", "R", "39", "R", "26", "L", "1", "R", "21", "R", "14", "L", "40", "L", "6", "R", "1", "R", "32", "R", "17", "R", "47", "L", "34", "L", "12", "L", "47", "L", "15", "R", "38", "L", "1", "R", "1", "L", "24", "L", "2", "L", "23", "L", "38", "L", "28", "R", "49", "L", "18", "R", "43", "R", "19", "L", "1", "R", "35", "R", "12", "R", "50", "L", "1", "R", "12", "R", "27", "R", "1", "L", "18", "L", "24", "R", "2", "L", "8", "R", "37", "R", "37", "L", "49", "R", "41", "R", "1", "L", "38", "L", "32", "R", "12", "R", "46", "L", "11", "L", "6", "R", "33", "L", "12", "R", "1", "R", "16", "R", "43", "R", "14", "R", "50", "R", "13", "L", "35", "L", "14", "L", "3", "L", "49", "R", "43", "R", "30", "R", "17", "R", "45", "R", "30", "R", "8", "L", "27", "R", "37", "R", "40", "L", "29", "R", "38", "R", "25", "R", "29", "R", "21", "R", "37", "L", "45", "R", "27", "R", "3", "R", "30", "L", "12", "L", "32", "R", "22", "L", "10", "R", "30", "R", "24", "L", "17", "L", "5", "R", "3", "L", "22", "R", "21", "L", "13", "L", "15", "L", "40", "L", "17", "L", "36", "L", "16", "R", "4", "R", "34", "R", "27", "L", "43", "L", "29", "R", "49", "L", "24", "R", "43", "L", "14", "R", "34", "L", "6", "L", "42", "R", "32", "R", "40", "L", "13", "L", "31", "R", "17", "R", "24", "R", "31", "R", "27", "L", "33", "L", "2", "L", "24", "R", "28", "L", "49", "L", "8", "R", "29", "L", "25", "R", "25", "R", "27", "L", "37", "R", "49", "R", "3", "L", "21", "L", "4", "R", "38", "L", "20", "R", "2", "R", "12", "R", "21", "L", "32", "L", "25", "R", "10", "L", "5", "R", "43", "L", "47", "R", "46", "L", "21", "R", "48", "R", "8", "L", "33", "L", "43", "L", "38", "L", "26", "L", "39", "L", "16", "L", "8", "L", "14", "R", "13", "R", "11", "R", "3", "L", "15", "L", "46", "L", "25", "R", "5", "R", "8", "L", "24", "L", "2", "L", "33", "L", "37", "L", "2", "R", "33", "R", "13", "R", "2", "R", "17", "R", "34", "L", "46", "L", "35", "L", "29", "L", "32", "L", "46", "L", "4", "L", "45", "L", "4", "L", "27", "L", "23", "L", "34", "R", "8", "L", "37", "L", "31", "L", "20", "L", "29", "R", "29", "L", "46", "R", "34", "L", "41", "L", "37", "L", "1", "R", "10", "R", "34", "L", "25", "R", "20", "R", "40", "L", "26", "L", "11", "L", "5", "L", "8", "R", "4", "L", "45", "R", "20", "L", "17", "L", "16", "L", "48", "L", "32", "L", "35", "R", "36", "L", "20", "L", "39", "R", "13", "L", "18", "L", "2", "L", "9", "R", "6", "L", "20", "R", "14", "R", "30", "R", "15", "R", "36", "R", "38", "L", "32", "L", "36", "R", "17", "L", "16", "R", "25", "L", "47", "L", "30", "R", "40", "L", "13", "L", "36", "R", "40", "R", "7", "R", "8", "R", "24", "L", "3", "R", "25", "R", "26", "R", "6", "L", "38", "R", "7", "R", "24", "L", "34", "L", "13", "R", "43", "R", "30", "L", "6", "L", "38", "L", "28", "R", "21", "L", "11", "R", "12", "L", "32", "R", "29", "L", "25", "R", "50", "R", "25", "L", "29", "L", "5", "L", "44", "R", "31", "R", "26", "R", "10", "R", "49", "L", "36", "R", "49", "R", "44", "R", "28", "R", "13", "L", "7", "L", "2", "L", "19", "L", "38", "R", "37", "L", "4", "L", "2", "R", "36", "R", "33", "L", "11", "L", "40", "L", "27", "L", "22", "R", "17", "L", "27", "R", "14", "R", "5", "L", "8", "R", "40", "L", "23", "L", "28", "R", "10", "L", "33", "L", "46", "L", "1", "L", "31", "L", "14", "L", "49", "R", "5", "L", "26", "L", "38", "L", "5", "R", "29", "R", "25", "L", "47", "R", "34", "L", "15", "R", "37", "L", "28", "L", "8", "R", "17", "L", "22", "L", "37", "R", "35", "L", "8", "L", "45", "R", "3", "L", "1", "R", "5", "R", "3", "R", "7", "L", "47", "L", "9", "L", "37", "R", "27", "L", "2", "R", "4", "L", "48", "L", "2", "R", "15", "R", "25", "L", "17", "L", "42", "R", "6", "R", "33", "L", "19", "L", "12", "L", "3", "R", "5", "L", "25", "L", "40", "L", "27", "L", "42", "L", "2", "L", "9", "L", "45", "L", "10", "L", "20", "L", "33", "L", "42", "L", "18", "R", "1", "R", "3", "L", "24", "L", "39", "R", "14", "L", "48", "R", "13", "L", "21", "R", "23", "R", "37", "L", "16", "L", "34", "L", "19", "L", "42", "L", "4", "L", "8", "R", "10", "R", "47", "R", "26", "R", "6", "R", "19", "L", "15", "R", "43", "R", "5", "L", "5", "R", "32", "L", "28", "L", "14", "R", "38", "R", "21", "L", "45", "L", "46", "L", "19", "L", "41", "R", "10", "L", "13", "L", "15", "L", "36", "R", "46", "L", "39", "L", "8", "L", "33", "R", "4", "L", "40", "L", "7", "L", "12", "L", "47", "L", "31", "R", "17", "L", "17", "L", "47", "L", "27", "L", "25", "L", "43", "L", "2", "L", "16", "L", "6", "L", "19", "R", "5", "R", "16", "L", "45", "L", "12", "L", "11", "L", "46", "L", "5", "R", "34", "R", "40", "L", "18", "R", "7", "L", "47", "R", "28", "L", "31", "L", "38", "L", "39", "L", "40", "R", "47", "L", "5", "R", "47", "L", "38", "R", "47", "L", "16", "L", "14", "L", "34", "R", "50", "R", "15", "R", "35", "R", "11", "L", "49", "R", "48", "L", "18", "R", "32", "L", "46", "R", "16", "L", "4", "L", "32", "L", "20", "R", "23", "L", "10", "L", "46", "R", "6", "L", "19", "R", "8", "R", "31", "R", "9", "R", "31", "R", "45", "R", "25", "R", "32", "R", "29", "L", "24", "L", "39", "R", "35", "R", "26", "L", "25", "L", "48", "L", "19", "R", "43", "L", "26", "R", "27", "L", "45", "R", "5", "L", "31", "R", "48", "R", "1", "L", "11", "L", "9", "L", "9", "R", "34", "L", "32", "L", "17", "L", "24", "R", "34", "L", "14", "L", "35", "L", "7", "L", "37", "L", "7", "R", "7", "R", "15", "R", "36", "R", "46", "R", "24", "L", "43", "R", "14", "L", "49", "R", "47", "R", "22", "R", "27", "L", "29", "L", "9", "R", "50", "R", "34", "R", "1", "L", "38", "R", "37", "L", "42", "R", "31", "R", "33", "R", "19", "R", "35", "R", "40", "L", "14", "R", "30", "L", "7", "L", "32", "R", "19", "L", "45", "R", "6", "R", "14", "L", "27", "L", "27", "L", "18", "L", "35", "R", "15", "R", "48", "L", "31", "L", "29", "L", "33", "R", "8", "R", "24", "R", "7", "R", "19", "L", "32", "R", "17", "R", "42", "R", "38", "L", "49", "R", "4", "L", "44", "R", "18", "R", "7", "R", "40", "L", "19", "R", "6", "L", "29", "L", "50", "L", "38", "R", "14", "R", "28", "L", "27", "L", "20", "R", "3", "L", "25", "L", "18", "L", "23", "L", "49", "R", "6", "L", "46", "L", "19", "L", "33", "L", "36", "L", "35", "R", "29", "R", "34", "R", "50", "L", "13", "R", "20", "R", "1", "L", "33", "R", "15", "L", "17", "L", "45", "R", "32", "L", "32", "R", "24", "R", "6", "R", "6", "L", "24", "R", "39", "R", "48", "L", "21", "L", "26", "L", "15", "L", "29", "L", "9", "L", "36", "L", "20", "L", "28", "L", "26", "L", "43", "R", "11", "R", "10", "L", "29", "L", "44", "L", "37", "L", "37", "R", "37", "L", "12", "R", "16", "L", "31", "R", "41", "L", "32", "L", "21", "L", "49", "L", "32", "L", "22", "L", "34", "L", "46", "R", "44", "R", "17", "L", "11", "R", "44", "R", "2", "R", "14", "L", "27", "R", "26", "R", "19", "R", "24", "L", "31", "L", "17", "R", "40", "R", "41", "L", "35", "R", "11", "R", "38", "R", "32", "R", "49", "R", "44", "L", "30", "L", "49", "L", "25", "L", "46", "L", "31", "R", "39", "R", "36", "R", "1", "L", "44", "R", "20", "L", "4", "L", "9", "R", "11", "L", "44", "L", "33", "R", "43", "R", "17", "R", "8", "L", "1", "R", "17", "L", "3", "L", "35", "R", "20", "L", "35", "L", "39", "R", "27", "L", "10", "R", "6", "L", "38", "R", "37", "R", "48", "R", "39", "R", "28", "R", "34", "L", "38", "L", "12", "L", "45", "R", "50", "L", "27", "L", "43", "L", "43", "R", "24", "R", "24", "R", "26", "R", "13", "L", "8", "L", "47", "L", "10", "R", "50", "L", "24", "R", "38", "L", "28", "R", "41", "R", "41", "R", "38", "R", "3", "L", "9", "R", "45", "L", "15", "R", "36", "R", "31", "R", "20", "R", "45", "L", "27", "R", "14", "L", "1", "L", "43", "L", "1", "L", "41", "L", "40", "L", "31", "R", "47", "R", "45", "L", "15", "L", "44", "R", "25", "L", "4", "L", "25", "L", "13", "L", "32", "R", "40", "L", "25", "R", "1", "R", "43", "L", "45", "R", "10", "L", "18", "L", "47", "R", "43", "L", "5", "L", "21", "L", "23", "R", "18", "L", "49", "L", "47", "R", "44", "L", "37", "R", "9", "R", "30", "R", "4", "L", "44", "R", "18", "R", "4", "L", "29", "L", "10", "R", "21", "R", "15", "L", "4", "L", "16", "L", "10", "R", "42", "L", "38", "R", "32", "R", "35", "R", "26", "R", "26", "L", "3", "L", "48", "L", "28", "R", "29", "R", "5", "R", "43", "L", "32", "L", "44", "R", "32", "R", "39", "L", "41", "L", "37", "L", "9", "R", "17", "L", "16", "L", "5", "R", "50", "L", "34", "R", "31", "L", "28", "R", "26", "L", "34", "L", "36", "R", "5", "L", "43", "R", "31", "R", "35", "L", "37", "R", "22", "L", "17", "L", "7", "R", "5", "R", "4", "L", "47", "L", "42", "L", "27", "L", "12", "L", "7", "R", "45", "R", "20", "L", "29", "R", "8", "R", "39", "R", "46", "R", "15", "R", "14", "R", "28", "L", "24", "R", "8", "R", "31", "R", "3", "L", "47", "L", "38", "R", "4", "L", "18", "L", "13", "R", "45", "L", "13", "R", "28", "R", "4", "R", "24", "L", "13", "L", "28", "L", "16", "L", "12", "L", "6", "R", "12", "L", "31", "L", "26", "R", "44", "R", "17", "R", "13", "R", "1", "L", "1", "R", "36", "L", "10", "L", "31", "L", "17", "R", "1", "L", "16", "L", "47", "L", "19", "R", "48", "R", "6", "L", "3", "L", "29", "R", "9", "L", "7", "L", "10", "R", "22", "R", "16", "L", "42", "R", "49", "L", "40", "L", "25", "L", "14", "R", "8", "R", "6", "L", "18", "R", "6", "L", "13", "L", "9", "R", "44", "R", "37", "R", "38", "L", "11", "L", "29", "R", "26", "R", "11", "L", "25", "L", "35", "L", "39", "R", "27", "L", "9", "R", "36", "L", "7", "L", "46", "R", "21", "L", "28", "R", "30", "R", "28", "L", "47", "R", "22", "R", "50", "R", "42", "L", "8", "L", "47", "R", "40", "R", "47", "R", "49", "R", "20", "R", "14", "L", "4", "R", "27", "R", "10", "L", "32", "R", "18", "L", "33", "L", "1", "R", "27", "L", "30", "L", "39", "L", "20", "R", "27", "R", "50", "L", "8", "L", "32", "R", "17", "L", "40", "R", "27", "L", "23", "L", "16", "L", "36", "R", "48", "L", "38", "R", "3", "L", "36", "L", "45", "R", "31", "L", "7", "R", "21", "L", "14", "L", "23", "R", "47", "L", "34", "L", "25", "L", "38", "L", "1", "L", "45", "R", "12", "R", "17", "L", "17", "L", "46", "R", "49", "L", "19", "L", "33", "L", "30", "R", "33", "R", "26", "L", "3", "L", "40", "L", "15", "R", "24", "R", "37", "L", "10", "L", "24", "R", "27", "L", "50", "L", "17", "R", "35", "L", "2", "R", "45", "L", "40", "R", "20", "R", "10", "R", "25", "L", "27", "R", "23", "L", "14", "L", "9", "R", "10", "R", "16", "R", "32", "L", "27", "R", "18", "R", "22", "L", "14", "L", "29", "L", "32", "L", "25", "R", "18", "R", "41", "R", "31", "L", "21", "L", "27", "R", "5", "R", "33", "L", "31", "L", "40", "R", "15", "L", "3", "R", "22", "L", "16", "L", "11", "L", "20", "R", "3", "L", "32", "L", "8", "R", "8", "L", "40", "L", "11", "L", "45", "R", "9", "L", "13", "R", "8", "L", "19", "R", "42", "R", "17", "L", "18", "L", "22", "R", "16", "L", "39", "R", "13", "R", "29", "R", "44", "R", "12", "R", "25", "R", "38", "L", "23", "L", "24", "L", "38", "L", "21", "L", "29", "L", "20", "L", "32", "L", "4", "L", "43", "L", "11", "L", "15", "R", "14", "R", "17", "L", "9", "L", "42", "R", "42", "R", "26", "R", "20", "R", "3", "R", "22", "R", "46", "L", "50", "R", "42", "L", "28", "R", "49", "R", "37", "L", "35", "R", "16", "L", "24", "R", "7", "R", "9", "R", "47", "L", "16", "R", "7", "L", "32", "L", "22", "R", "5", "L", "42", "R", "40", "R", "6", "L", "18", "L", "50", "L", "25", "R", "8", "L", "43", "L", "6", "R", "10", "L", "19", "R", "25", "L", "3", "R", "9", "L", "11", "R", "48", "R", "25", "L", "37", "L", "16", "L", "29", "L", "2", "L", "49", "R", "42", "R", "23", "R", "13", "L", "36", "R", "20", "R", "21", "L", "38", "L", "37", "L", "42", "R", "26", "L", "35", "L", "47", "R", "23", "L", "13", "L", "5", "L", "48", "R", "46", "L", "11", "R", "43", "R", "26", "R", "27", "L", "12", "L", "49", "R", "16", "R", "13", "L", "29", "R", "36", "L", "34", "R", "7", "L", "16", "L", "1", "R", "49", "L", "46", "L", "46", "L", "25", "L", "46", "R", "34", "R", "30", "L", "15", "L", "35", "R", "37", "L", "3", "L", "37", "L", "36", "L", "43", "R", "46", "L", "14", "L", "35", "R", "38", "L", "46", "L", "24", "L", "45", "L", "8", "R", "1", "L", "46", "R", "30", "R", "17", "R", "15", "L", "17", "R", "7", "R", "37", "L", "35", "L", "28", "R", "5", "R", "27", "R", "13", "L", "32", "R", "5", "L", "18", "L", "48", "L", "3", "R", "1", "R", "11", "R", "2", "R", "36", "R", "28", "R", "9", "L", "37", "R", "10", "L", "2", "R", "17", "R", "32", "R", "7", "R", "8", "L", "24", "R", "44", "R", "26", "R", "4", "R", "1", "R", "24", "L", "16", "L", "43", "R", "38", "L", "33", "L", "45", "R", "23", "L", "23", "R", "33", "L", "45", "L", "4", "R", "37", "R", "28", "R", "39", "L", "43", "R", "50", "L", "45", "R", "49", "L", "10", "R", "2", "R", "26", "L", "24", "R", "50", "L", "27", "R", "50", "L", "40", "R", "46", "R", "40", "R", "32", "L", "20", "R", "38", "R", "19", "L", "24", "R", "28", "L", "28", "R", "26", "L", "50", "L", "43", "R", "20", "R", "8", "R", "43", "R", "31", "L", "21", "L", "31", "L", "22", "L", "43", "R", "1", "R", "15", "R", "28", "R", "8", "L", "29", "L", "34", "R", "4", "L", "1", "L", "48", "L", "18", "L", "17", "R", "45", "R", "1", "R", "23", "R", "46", "R", "31", "R", "31", "L", "3", "R", "5", "L", "36", "L", "45", "L", "1", "R", "10", "L", "14", "L", "10", "L", "36", "R", "5", "L", "10", "L", "45", "L", "22", "L", "47", "L", "42", "L", "15", "L", "48", "L", "42", "R", "14", "R", "41", "L", "10", "R", "49", "L", "25", "L", "18", "R", "8", "R", "43", "R", "29", "R", "9", "R", "6", "R", "31", "R", "8", "L", "6", "R", "22", "L", "13", "L", "24", "R", "28", "R", "15", "R", "13", "L", "32", "L", "2", "R", "17", "R", "16", "L", "17", "L", "16", "R", "33", "L", "7", "L", "8", "R", "50", "L", "41", "L", "22", "L", "47", "L", "30", "L", "47", "L", "37", "R", "11", "R", "44", "R", "1", "R", "46", "R", "48", "L", "38", "L", "7", "L", "24", "L", "44", "R", "43", "L", "14", "L", "43", "L", "40", "R", "41", "R", "44", "L", "48", "L", "4", "L", "11", "L", "36", "L", "39", "L", "23", "L", "24", "L", "15", "L", "34", "L", "7", "R", "35", "R", "22", "R", "42", "R", "49", "L", "35", "R", "7", "R", "1", "L", "8", "R", "42", "L", "27", "R", "39", "L", "37", "R", "1", "L", "21", "R", "2", "R", "33", "L", "18", "L", "17", "R", "2", "L", "37", "L", "8", "L", "35", "L", "16", "R", "25", "R", "32", "R", "4", "L", "33", "L", "24", "R", "20", "R", "41", "R", "39", "L", "12", "L", "12", "L", "42", "R", "33", "L", "4", "R", "38", "L", "42", "L", "16", "L", "14", "L", "32", "R", "36", "L", "15", "L", "1", "L", "20", "R", "14", "R", "37", "R", "33", "L", "21", "L", "24", "R", "28", "L", "11", "L", "12", "L", "49", "L", "13", "R", "4", "R", "26", "R", "2", "L", "4", "L", "35", "L", "42", "R", "11", "R", "23", "R", "27", "L", "6", "R", "38", "R", "9", "R", "47", "L", "23", "L", "4", "R", "37", "R", "5", "L", "37", "L", "11", "R", "11", "L", "19", "L", "10", "L", "38", "L", "17", "R", "3", "L", "18", "R", "44", "L", "22", "R", "10", "R", "50", "L", "33", "L", "29", "L", "42", "R", "15", "L", "3", "L", "20", "L", "5", "R", "6", "R", "23", "R", "6", "R", "25", "L", "46", "L", "48", "L", "9", "L", "22", "R", "37", "L", "16", "R", "7", "L", "22", "L", "37", "R", "36", "R", "17", "R", "13", "L", "21", "L", "4", "L", "27", "L", "41", "R", "35", "L", "29", "R", "47", "R", "7", "R", "13", "R", "43", "R", "9", "L", "33", "L", "50", "R", "50", "R", "30", "L", "37", "R", "48", "R", "46", "R", "13", "R", "45", "L", "8", "L", "47", "R", "49", "R", "11", "R", "19", "L", "3", "R", "15", "R", "27", "R", "31", "R", "33", "L", "14", "R", "25", "R", "46", "R", "14", "R", "45", "R", "44", "L", "10", "L", "11", "L", "36", "R", "30", "L", "13", "L", "36", "L", "26", "L", "24", "R", "29", "R", "46", "L", "4", "R", "22", "R", "47", "R", "19", "L", "24", "L", "8", "R", "13", "R", "35", "L", "33", "L", "24", "R", "41", "R", "39", "L", "36", "L", "17", "L", "25", "L", "10", "L", "12", "R", "13", "L", "39", "R", "20", "R", "46", "L", "25", "L", "41", "R", "49", "L", "13", "L", "5", "R", "34", "L", "19", "R", "13", "R", "32", "L", "33", "L", "6", "L", "35", "R", "44", "R", "40", "R", "4", "R", "41", "L", "39", "L", "45", "R", "49", "R", "36", "L", "47", "R", "14", "R", "6", "L", "14", "R", "1", "L", "15", "L", "21", "R", "11", "R", "47", "R", "45", "R", "23", "R", "25", "R", "43", "L", "14", "L", "1", "R", "25", "R", "19", "L", "38", "L", "16", "R", "14", "L", "32", "R", "29", "L", "25", "L", "43", "L", "33", "L", "17", "L", "1", "R", "11", "L", "5", "R", "25", "L", "32", "R", "40", "L", "6", "R", "47", "R", "14", "L", "20", "L", "43", "R", "49", "R", "36", "R", "12", "R", "36", "R", "47", "L", "6", "R", "28", "R", "49", "R", "32", "R", "38", "R", "41", "R", "35", "L", "43", "L", "42", "R", "43", "R", "50", "R", "24", "R", "9", "L", "7", "R", "41", "L", "16", "R", "34", "R", "13", "R", "16", "L", "50", "R", "11", "L", "39", "L", "48", "L", "32", "R", "34", "L", "16", "L", "11", "R", "43", "R", "27", "R", "3", "R", "50", "R", "18", "L", "16", "L", "46", "L", "37", "L", "14", "L", "42", "R", "6", "R", "27", "L", "49", "L", "48", "L", "7", "L", "27", "L", "47", "R", "10", "L", "47", "R", "30", "R", "39", "L", "38", "L", "14", "R", "32", "L", "47", "L", "44", "L", "2", "L", "22", "L", "32", "L", "44", "L", "37", "L", "46", "R", "6", "R", "18", "R", "49", "L", "14", "R", "45", "R", "17", "L", "21", "R", "18", "R", "47", "L", "49", "R", "19", "R", "23", "L", "43", "R", "18", "R", "40", "L", "35", "L", "27", "L", "34", "R", "26", "R", "17", "L", "26", "R", "16", "L", "26", "R", "46", "L", "33", "R", "26", "L", "49", "L", "38", "R", "33", "R", "38", "R", "29", "R", "38", "R", "37", "R", "40", "L", "1", "L", "13", "L", "5", "R", "45", "L", "20", "L", "48", "R", "12", "L", "17", "L", "11", "R", "16", "R", "2", "R", "35", "R", "3", "R", "14", "L", "47", "L", "8", "R", "10", "R", "34", "L", "42", "R", "8", "R", "38", "R", "14", "L", "48", "L", "8", "L", "47", "R", "24", "L", "10", "L", "44", "L", "7", "R", "14", "L", "31", "R", "6", "R", "8", "L", "11", "L", "12", "R", "37", "R", "11", "R", "22", "L", "14", "L", "50", "L", "43", "R", "28", "L", "21", "R", "7", "R", "42", "L", "20", "L", "1", "L", "4", "L", "42", "L", "4", "R", "26", "R", "20", "R", "48", "R", "6", "R", "37", "R", "29", "L", "5", "L", "8", "R", "8", "R", "12", "R", "18", "L", "45", "L", "39", "R", "46", "R", "6", "R", "24", "R", "23", "R", "16", "R", "12", "R", "28", "L", "27", "R", "33", "R", "15", "R", "49", "R", "41", "L", "9", "L", "12", "L", "31", "R", "21", "L", "33", "R", "31", "R", "26", "R", "6", "R", "16", "R", "21", "L", "24", "L", "5", "R", "11", "L", "44", "L", "3", "L", "30", "L", "6", "L", "21", "R", "9", "L", "6", "L", "5", "R", "1", "L", "17", "L", "5", "R", "40", "L", "48", "L", "20", "R", "5", "R", "37", "R", "37", "L", "29", "R", "2", "R", "35", "L", "12", "R", "19", "R", "11", "L", "49", "L", "49", "L", "21", "R", "24", "R", "25", "L", "45", "R", "17", "L", "33", "L", "13", "R", "20", "L", "9", "R", "39", "L", "12", "L", "27", "L", "21", "R", "7", "L", "49", "R", "35", "L", "8", "L", "21", "L", "11", "R", "16", "R", "43", "L", "48", "L", "28", "L", "13", "L", "35", "L", "46", "L", "8", "R", "32", "R", "35", "R", "46", "R", "14", "L", "46", "L", "44", "L", "21", "R", "6", "R", "11", "L", "26", "R", "1", "L", "3", "R", "20", "L", "27", "R", "28", "L", "12", "R", "9", "R", "17", "R", "7", "L", "43", "L", "43", "L", "34", "R", "16", "L", "4", "L", "23", "L", "33", "L", "40", "L", "46", "L", "35", "R", "20", "L", "47", "R", "12", "L", "13", "L", "6", "R", "32", "L", "26", "L", "18", "L", "6", "L", "39", "L", "31", "L", "2", "L", "31", "L", "29", "R", "40", "R", "9" };
                cubeWidth = 50;
                CubeTransformations(cubeWidth, cubeMapping);
            }
            else
            {
                directions = new List<string>() { "10", "R", "5", "L", "5", "R", "10", "L", "4", "R", "5", "L", "5" };
                cubeWidth = 4;
                CubeTransformationsDebug(cubeWidth, cubeMapping);
            }

            List<List<List<char>>> cubesList = PopulateCubeLists(lines, maxLengthRow, mappingToOriginal, originalMappingToCube, cubeWidth);

            (int r, int c, int cube) cur = (0, 0, 0);
            int facing = 0;

            foreach (string dir in directions)
            {

                if (dir.Equals("L"))
                {
                    facing = (facing - 1 + 4) % 4;
                }
                else if (dir.Equals("R"))
                {
                    facing = (facing + 1) % 4;
                }
                else
                {
                    int amount = int.Parse(dir);
                    bool hitWall = false;

                    for (int i = 0; i < amount; i++)
                    {

                        switch (facing)
                        {
                            case UP:

                                if ((cur.r - 1) == -1)
                                {
                                    var newCubePos = cubeMapping[(cur.cube, cur.r, cur.c, facing)];

                                    if (cubesList[newCubePos.cube][newCubePos.r][newCubePos.c] == '#')
                                    {
                                        hitWall = true;
                                        break;
                                    }
                                    if (cubesList[newCubePos.cube][newCubePos.r][newCubePos.c] == '.')
                                    {
                                        facing = newCubePos.dir;
                                        cur = (newCubePos.r, newCubePos.c, newCubePos.cube);
                                        break;
                                    }
                                }
                                else
                                {
                                    if (cubesList[cur.cube][(cur.r - 1)][(cur.c + 0)] == '#')
                                    {
                                        hitWall = true;
                                        break;
                                    }
                                    cur = ((cur.r - 1 + cubeWidth) % cubeWidth, cur.c + 0, cur.cube);
                                }
                                break;




                            case RIGHT:

                                if ((cur.c + 1) == cubeWidth)
                                {
                                    var newCubePos = cubeMapping[(cur.cube, cur.r, cur.c, facing)];

                                    if (cubesList[newCubePos.cube][newCubePos.r][newCubePos.c] == '#')
                                    {
                                        hitWall = true;
                                        break;
                                    }
                                    if (cubesList[newCubePos.cube][newCubePos.r][newCubePos.c] == '.')
                                    {
                                        facing = newCubePos.dir;
                                        cur = (newCubePos.r, newCubePos.c, newCubePos.cube);
                                        break;
                                    }
                                }
                                else
                                {
                                    if (cubesList[cur.cube][(cur.r + 0)][(cur.c + 1)] == '#')
                                    {
                                        hitWall = true;
                                        break;
                                    }
                                    cur = ((cur.r + 0) % cubeWidth, (cur.c + 1) % cubeWidth, cur.cube);
                                }
                                break;




                            case DOWN:

                                if ((cur.r + 1) == cubeWidth)
                                {
                                    var newCubePos = cubeMapping[(cur.cube, cur.r, cur.c, facing)];

                                    if (cubesList[newCubePos.cube][newCubePos.r][newCubePos.c] == '#')
                                    {
                                        hitWall = true;
                                        break;
                                    }
                                    if (cubesList[newCubePos.cube][newCubePos.r][newCubePos.c] == '.')
                                    {
                                        facing = newCubePos.dir;
                                        cur = (newCubePos.r, newCubePos.c, newCubePos.cube);
                                        break;
                                    }
                                }
                                else
                                {
                                    if (cubesList[cur.cube][(cur.r + 1)][(cur.c + 0)] == '#')
                                    {
                                        hitWall = true;
                                        break;
                                    }
                                    cur = ((cur.r + 1) % cubeWidth, cur.c + 0, cur.cube);
                                }
                                break;




                            case LEFT:

                                if ((cur.c - 1) == -1)
                                {
                                    var newCubePos = cubeMapping[(cur.cube, cur.r, cur.c, facing)];

                                    if (cubesList[newCubePos.cube][newCubePos.r][newCubePos.c] == '#')
                                    {
                                        hitWall = true;
                                        break;
                                    }
                                    if (cubesList[newCubePos.cube][newCubePos.r][newCubePos.c] == '.')
                                    {
                                        facing = newCubePos.dir;
                                        cur = (newCubePos.r, newCubePos.c, newCubePos.cube);
                                        break;
                                    }
                                }
                                else
                                {
                                    if (cubesList[cur.cube][(cur.r + 0)][(cur.c - 1)] == '#')
                                    {
                                        hitWall = true;
                                        break;
                                    }
                                    cur = (cur.r + 0, (cur.c - 1 + cubeWidth) % cubeWidth, cur.cube);
                                }

                                break;
                            default:
                                break;
                        }
                        if (hitWall)
                        {
                            break;
                        }
                    }
                    //for (int i = 0; i < lines.Length; i++)
                    //{
                    //    for (int j = 0; j < maxLengthRow; j++)
                    //    {
                    //        if (i == 8 && j == 8)
                    //        {
                    //            int test = 5;
                    //        }
                    //        if (originalMappingToCube.ContainsKey((i, j)))
                    //        {
                    //            var cubeCoordsTemp = originalMappingToCube[(i, j)];
                    //            //var origCoordsTemp = mappingToOriginal[(cur.cube, cur.r, cur.c)];
                    //            if (cubeCoordsTemp.cube == cur.cube && cubeCoordsTemp.r == cur.r && cubeCoordsTemp.c == cur.c)
                    //            {
                    //                Console.Write("@");
                    //            }
                    //            else
                    //            {
                    //                Console.Write(lines[i][j]);

                    //            }
                    //        }
                    //        else
                    //        {
                    //            Console.Write(lines[i][j]);

                    //        }
                    //    }
                    //    Console.WriteLine();
                    //}
                    //Console.WriteLine();
                }
            }

            var origCoords = mappingToOriginal[(cur.cube, cur.r, cur.c)];
            long ans = (origCoords.r + 1) * 1000 + (origCoords.c + 1) * 4 + facing;

            return ans.ToString();
        }

        private static List<List<List<char>>> PopulateCubeLists(string[] lines, int maxLengthRow, Dictionary<(int, int, int), (int, int)> mappingToOriginal, Dictionary<(int, int), (int, int, int)> originalMappingToCube, int cubeWidth)
        {
            List<List<List<char>>> cubesList = new List<List<List<char>>>();
            cubesList.Add(new List<List<char>>());
            cubesList.Add(new List<List<char>>());
            cubesList.Add(new List<List<char>>());
            cubesList.Add(new List<List<char>>());
            cubesList.Add(new List<List<char>>());
            cubesList.Add(new List<List<char>>());
            int cubeRows = 0;
            int cubeCols = 0;
            int cubeNum = 0;
            var seen = new HashSet<(int, int)>();

            for (int i = 0; i < 6; i++)
            {
                for (int r = 0; r < lines.Length; r++)
                {
                    bool rowFound = false;
                    cubeRows++;

                    for (int c = 0; c < maxLengthRow; c++)
                    {
                        if ((lines[r][c] == '.' || lines[r][c] == '#') && !seen.Contains((r, c)))
                        {
                            if (!rowFound)
                            {
                                cubesList[cubeNum].Add(new List<char>());
                            }
                            cubeCols++;
                            rowFound = true;
                            cubesList[cubeNum][cubeRows - 1].Add(lines[r][c]);


                            mappingToOriginal[(cubeNum, cubeRows - 1, cubeCols - 1)] = (r, c);
                            originalMappingToCube[(r, c)] = (cubeNum, cubeRows - 1, cubeCols - 1);
                            seen.Add((r, c));
                            if (cubeCols == cubeWidth)
                            {
                                cubeCols = 0;
                                break;
                            }
                        }
                    }
                    if (!rowFound)
                    {
                        cubeRows--;
                    }
                    if (cubeRows == cubeWidth)
                    {
                        cubeRows = 0;
                        cubeCols = 0;
                        cubeNum++;
                        break;
                    }
                }
            }

            return cubesList;
        }

        private static void CubeTransformations(int cubeWidth, Dictionary<(int, int, int, int), (int, int, int, int)> cubeMapping)
        {
            int cube1 = 0;
            int cube2 = 1;
            int cube3 = 2;
            int cube4 = 3;
            int cube5 = 4;
            int cube6 = 5;

            // cube 1
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube1, r, c, d)] = (cube6, c, 0, RIGHT);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube1, r, c, d)] = (cube3, 0, c, d);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube1, r, c, d)] = (cube4, (cubeWidth - 1) - r, 0, RIGHT);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube1, r, c, d)] = (cube2, r, 0, d);
                        }
                    }
                }
            }

            // cube 2
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube2, r, c, d)] = (cube6, (cubeWidth - 1), c, d);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube2, r, c, d)] = (cube3, c, (cubeWidth - 1), LEFT);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube2, r, c, d)] = (cube1, r, (cubeWidth - 1), d);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube2, r, c, d)] = (cube5, (cubeWidth - 1) - r, (cubeWidth - 1), LEFT);
                        }
                    }
                }
            }

            // cube 3
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube3, r, c, d)] = (cube1, (cubeWidth - 1), c, d);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube3, r, c, d)] = (cube5, 0, c, d);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube3, r, c, d)] = (cube4, 0, r, DOWN);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube3, r, c, d)] = (cube2, (cubeWidth - 1), r, UP);
                        }
                    }
                }
            }

            // cube 4
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube4, r, c, d)] = (cube3, c, 0, RIGHT);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube4, r, c, d)] = (cube6, 0, c, d);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube4, r, c, d)] = (cube1, (cubeWidth - 1) - r, 0, RIGHT);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube4, r, c, d)] = (cube5, r, 0, d);
                        }
                    }
                }
            }

            // cube 5
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube5, r, c, d)] = (cube3, (cubeWidth - 1), c, d);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube5, r, c, d)] = (cube6, c, (cubeWidth - 1), LEFT);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube5, r, c, d)] = (cube4, r, (cubeWidth - 1), d);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube5, r, c, d)] = (cube2, (cubeWidth - 1) - r, (cubeWidth - 1), LEFT);
                        }
                    }
                }
            }

            // cube 6
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube6, r, c, d)] = (cube4, (cubeWidth - 1), c, d);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube6, r, c, d)] = (cube2, 0, c, d);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube6, r, c, d)] = (cube1, 0, r, DOWN);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube6, r, c, d)] = (cube5, (cubeWidth - 1), r, UP);
                        }
                    }
                }
            }
        }

        private static void CubeTransformationsDebug(int cubeWidth, Dictionary<(int, int, int, int), (int, int, int, int)> cubeMapping)
        {
            int cube1 = 0;
            int cube2 = 1;
            int cube3 = 2;
            int cube4 = 3;
            int cube5 = 4;
            int cube6 = 5;
            // cube 1
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube1, r, c, d)] = (cube2, 0, (cubeWidth - 1) - c, DOWN);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube1, r, c, d)] = (cube4, 0, c, d);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube1, r, c, d)] = (cube3, 0, (cubeWidth - 1) - c, DOWN);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube1, r, c, d)] = (cube6, (cubeWidth - 1) - r, cubeWidth - 1, LEFT);
                        }
                    }
                }
            }

            // cube 2
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube2, r, c, d)] = (cube1, 0, c, DOWN);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube2, r, c, d)] = (cube5, (cubeWidth - 1), (cubeWidth - 1) - c, UP);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube2, r, c, d)] = (cube6, (cubeWidth - 1), r, UP);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube2, r, c, d)] = (cube3, r, 0, d);
                        }
                    }
                }
            }

            // cube 3
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube3, r, c, d)] = (cube1, c, 0, d);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube3, r, c, d)] = (cube5, 0, c, d);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube3, r, c, d)] = (cube2, r, (cubeWidth - 1), d);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube3, r, c, d)] = (cube4, r, 0, d);
                        }
                    }
                }
            }

            // cube 4
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube4, r, c, d)] = (cube1, 0, c, d);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube4, r, c, d)] = (cube5, 0, c, d);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube4, r, c, d)] = (cube3, r, (cubeWidth - 1), d);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube4, r, c, d)] = (cube6, 0, (cubeWidth - 1) - r, DOWN);
                        }
                    }
                }
            }

            // cube 5
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube5, r, c, d)] = (cube4, (cubeWidth - 1), c, d);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube5, r, c, d)] = (cube2, (cubeWidth - 1), (cubeWidth - 1) - c, UP);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube5, r, c, d)] = (cube3, (cubeWidth - 1), r, UP);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube5, r, c, d)] = (cube6, r, 0, d);
                        }
                    }
                }
            }

            // cube 6
            for (int r = 0; r < cubeWidth; r++)
            {
                for (int c = 0; c < cubeWidth; c++)
                {
                    for (int d = 0; d < 4; d++)
                    {
                        // up
                        if (r == 0 && d == UP)
                        {
                            cubeMapping[(cube6, r, c, d)] = (cube4, (cubeWidth - 1) - c, (cubeWidth - 1), LEFT);
                        }
                        // down
                        if (r == cubeWidth - 1 && d == DOWN)
                        {
                            cubeMapping[(cube6, r, c, d)] = (cube2, (cubeWidth - 1) - c, 0, RIGHT);
                        }
                        // left
                        if (c == 0 && d == LEFT)
                        {
                            cubeMapping[(cube6, r, c, d)] = (cube5, r, (cubeWidth - 1), d);
                        }
                        //right
                        if (c == cubeWidth - 1 && d == RIGHT)
                        {
                            cubeMapping[(cube6, r, c, d)] = (cube1, (cubeWidth - 1) - r, (cubeWidth - 1), LEFT);
                        }
                    }
                }
            }
        }
    }
}
